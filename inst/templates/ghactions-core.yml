
    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      # LaTeX. Installation time:
      # Linux: ~ 1 min
      # macOS: ~ 1 min 30s
      # Windows: never finishes
      - uses: r-lib/actions/setup-tinytex@v1
        if: runner.os != 'Windows'

      - uses: r-lib/actions/setup-pandoc@master

      # set date/week for use in cache creation
      # https://github.community/t5/GitHub-Actions/How-to-set-and-access-a-Workflow-variable/m-p/42970
      # - cache R packages daily
      # - cache ccache weekly -> 'ccache' helps rebuilding the package cache faster
      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Prepare weekly timestamp for cache"
        if: runner.os != 'Windows'
        id: datew
        run: echo "::set-output name=datew::$(date '+%Y-%V')"

      - name: "[Cache] Cache R packages"
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      - name: "[Cache] Cache ccache"
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.CCACHE_DIR}}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-${{steps.datew.outputs.datew}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-${{steps.datew.outputs.datew}}

      # install ccache and write config file
      - name: "[Linux] ccache"
        if: runner.os == 'Linux'
        run: |
          sudo apt install ccache libcurl4-openssl-dev
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars

      # install ccache and write config file
      # mirror the setup described in https://github.com/rmacoslib/r-macos-rtools
      - name: "[macOS] ccache"
        if: runner.os == 'macOS' && matrix.config.r != 'devel'
        run: |
          brew install ccache
          wget https://cran.r-project.org/bin/macosx/tools/clang-7.0.0.pkg
          sudo installer -package clang-7.0.0.pkg -target /
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/local/clang7/bin/clang\nCC11=ccache /usr/local/clang7/bin/clang\nCC14=ccache /usr/local/clang7/bin/clang\nCXX=ccache /usr/local/clang7/bin/clang++\nCXX11=ccache /usr/local/clang7/bin/clang++\nCXX14=ccache /usr/local/clang7/bin/clang++\nC11=ccache /usr/local/clang7/bin/clang++\nC14=ccache /usr/local/clang7/bin/clang++\nF77=ccache gfortran/nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk' > $HOME/.R/Makevars

      # install ccache and write config file
      # mirror the setup described in https://github.com/rmacoslib/r-macos-rtools
      - name: "[macOS-devel] ccache"
        if: runner.os == 'macOS' && matrix.config.r == 'devel'
        run: |
          brew install ccache
          wget https://cran.r-project.org/bin/macosx/tools/clang-8.0.0.pkg
          sudo installer -package clang-8.0.0.pkg -target /
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/local/clang8/bin/clang\nCC11=ccache /usr/local/clang8/bin/clang\nCC14=ccache /usr/local/clang8/bin/clang\nCXX=ccache /usr/local/clang8/bin/clang++\nCXX11=ccache /usr/local/clang8/bin/clang++\nCXX14=ccache /usr/local/clang8/bin/clang++\nC11=ccache /usr/local/clang8/bin/clang++\nC14=ccache /usr/local/clang8/bin/clang++\nF88=ccache gfortran/nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk' > $HOME/.R/Makevars

      # for some strange Windows reason this step and the next one need to be decoupled
      - name: "[Stage] Prepare"
        run: |
          Rscript -e "if (!requireNamespace('remotes')) {install.packages('remotes')}"
          Rscript -e "if (getRversion() < '3.2' && !requireNamespace('curl')) {install.packages('curl')}"

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: |
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      # macOS devel needs its own stage because we need to work with an env var to suppress the usage of binaries
      # the envvar is picked up and set via `options(pkgType)`
      - name: "[Stage] Install (macOS-devel)"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
        env:
          pkgType: source
        run: |
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'

      - name: "[Stage] After Success"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == '3.6'
        run: Rscript -e "tic::after_success()"

      - name: "[Stage] Upload R CMD check artifacts"
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
